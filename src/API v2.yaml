openapi: 3.0.3
info:
  title: Service Desk API v1
  version: 1.0.11
  description: >
servers:
  - url: http://localhost:8000
paths:
  "/api/v1/tickets":
    summary: TICKET API ENDPOINT - Standard Users
    post:
      summary: Create a new ticket.
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: >                
                {
                "title":"Sample Ticket",
                "firstMessage":"This is the first message!",
                "tags":"quiz1,oppe",
                "public":false
                }
      responses:
        '201':
          description: Valid ticket created
          content:
            application/json:
              examples:
                Valid Ticket Creation:
                  value: >
                    {
                    "status": 201,
                    "message": "Ticket created successfully",
                    "ticketID": "8afc9edb-ea74-43f5-88af-dc4006bcc755",
                    "title": "Sample Ticket",
                    "messageID": "ce77df5b-d044-44a4-987d-4a5d11baf707",
                    "firstMessage": "This is the first message!",
                    "is_public": false,
                    "senderID": "1",
                    "senderName": "API Tester User",
                    "senderPicture": null,
                    "tags": [
                        "oppe",
                        "quiz1"
                    ],
                    "timestamp": "2023-04-15 20:10:34.927117"
                    }
        '400':
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: |
                    {
                    "message": "Malformed request",
                    "status": 400
                    }
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: |
                    {"status":403,"message":"No access rights, forbidden!"}
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: |
                    {"status":500,"message":"Internal server error"}
    get:
      summary: Getting all public tickets
      description: ''
      operationId: ''
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              examples:
                Valid Ticket GET Request:
                  value: >
                    {
                    "status": 200,
                    "message": "Request Successful",
                    "tickets": [
                        {
                            "ticket_id": "ce8387e4-34f3-415a-afa1-93093f2b6293",
                            "Votes": 0,
                            "title": "Test",
                            "status": 0,
                            "last_response_time": "2023-04-15 21:57:51.711095",
                            "tags": [
                                "PapaDelta",
                                "Afnan",
                                "Tony",
                                "Stark"
                            ]
                        },
                        {
                            "ticket_id": "c600ba6e-e3ea-4aa2-b291-d9f8ccb0637e",
                            "Votes": 0,
                            "title": "TestTicket2",
                            "status": 0,
                            "last_response_time": "2023-04-16 13:19:45.491777",
                            "tags": []
                        },
                        {
                            "ticket_id": "ca1be183-8737-4ede-9588-7c0013d5d23b",
                            "Votes": 0,
                            "title": "TestTicket3",
                            "status": 0,
                            "last_response_time": "2023-04-16 13:20:01.455312",
                            "tags": [
                                "oppe"
                            ]
                        },
                        {
                            "ticket_id": "ed5be7ae-bf47-4e21-8887-191d651a7f7d",
                            "Votes": 0,
                            "title": "TestTicket4",
                            "status": 0,
                            "last_response_time": "2023-04-16 13:20:14.569626",
                            "tags": [
                                "quiz2"
                            ]
                        }
                      ]
                    }
        '400':
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: |
                    {"status":400,"message":"Malformed request!"}
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: |
                    {"status":403,"message":"No access rights, forbidden!"}
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: |
                    {"status":500,"message":"Internal server error"}
  /api/v1/mytickets:
    summary: TICKET API ENDPOINT - Logged-in User
    get:
      summary: Getting my (the logged-in user's) tickets
      description: ''
      operationId: ''
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              examples:
                Valid Ticket GET Request:
                  value: >
                    {
                    "status": 200,
                    "message": "Request Successful",
                    "tickets": [
                        {
                            "ticket_id": "c600ba6e-e3ea-4aa2-b291-d9f8ccb0637e",
                            "Votes": 0,
                            "title": "TestTicket2",
                            "status": 0,
                            "last_response_time": "2023-04-16 13:19:45.491777",
                            "is_public":true,
                            "tags": []
                        },
                        {
                            "ticket_id": "ca1be183-8737-4ede-9588-7c0013d5d23b",
                            "Votes": 0,
                            "title": "TestTicket3",
                            "status": 0,
                            "last_response_time": "2023-04-16 13:20:01.455312",
                            "is_public":false,
                            "tags": [
                                "oppe"
                            ]
                        },
                        {
                            "ticket_id": "ed5be7ae-bf47-4e21-8887-191d651a7f7d",
                            "Votes": 0,
                            "title": "TestTicket4",
                            "status": 0,
                            "last_response_time": "2023-04-16 13:20:14.569626",
                            "is_public":false,
                            "tags": [
                                "quiz2"
                            ]
                        }
                      ]
                    }
        '400':
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: |
                    {"status":400,"message":"Malformed request!"}
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: |
                    {"status":403,"message":"No access rights, forbidden!"}
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: |
                    {"status":500,"message":"Internal server error"}
  /api/v1/tickets/<UUID_ticket>:
    summary: SPECIFIC TICKET API ENDPOINT
    get:
      summary: Getting a specific ticket
      description: ''
      operationId: ''
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              examples:
                Valid Ticket GET Request:
                  value: >
                    {
                      "ticketID": "ce8387e4-34f3-415a-afa1-93093f2b6293",
                      "votes": 0,
                      "title": "Test",
                      "status": 0,
                      "solutionID": "0",
                      "last_response_time": "2023-04-15 21:57:51.711095",
                      "messages": [
                          {
                              "message_id": "a7d4dbf7-b937-480e-ae83-c608ea919841",
                              "text": "Test",
                              "sender_id": "1",
                              "timestamp": "2023-04-15 21:57:51.737432"
                          }
                      ],
                      "tags": [
                          "PapaDelta",
                          "Afnan",
                          "Tony",
                          "Stark"
                      ]
                    }
        '400':
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: |
                    {"status":400,"message":"Malformed request!"}
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: |
                    {"status":403,"message":"No access rights, forbidden!"}
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: |
                    {"status":500,"message":"Internal server error"}
    put:
      summary: Ticket Modification
      description: ''
      operationId: ''
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                title: Test YAML Modification Title
                public: false
                tags: "oppe1,quiz2,endterm"

      responses:
        '200':
          description: Ticket modified successfully
          content:
            application/json:
              examples:
                Valid Ticket Modification:
                  value: |
                    {
                      "message": "Ticket modified successfully",
                      "ticket": [
                          {
                              "ticket_id": "2d5fb389-1144-4902-99de-80042c2790e8",
                              "Votes": null,
                              "title": "Test YAML Modification Title",
                              "status": null,
                              "last_response_time": "2023-04-17 18:20:43",
                              "tags": [
                                  "oppe1",
                                  "quiz2",
                                  "endterm"
                              ]
                          }
                      ]
                    }
        '400':
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: |
                    {"status":400,"message":"Malformed request!"}
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: |
                    {"status":403,"message":"No access rights, forbidden!"}
        404:
          description: Associated ticket not found
          content:
            application/json:
              examples:
                Wrong Ticket UUID supplied:
                  value: |
                    {"status":404,"message":"Ticket doesn't exist!"}
        
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: |
                    {"status":500,"message":"Internal server error"}
    delete:
      summary: Ticket Deletion
      description: ''
      operationId: ''
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Ticket deleted successfully
          content:
            application/json:
              examples:
                Valid Ticket Deletion:
                  value: |
                    {
                      "message": "Ticket and associated messages deleted successfully"
                    }
        '404':
          description: Ticket not found
          content:
            application/json:
              examples:
                Invalid Ticket ID Deletion:
                  value: |
                    {
                      "message": "Ticket doesn't exist"
                    }
        '400':
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: |
                    {"status":400,"message":"Malformed request!"}
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: |
                    {"status":403,"message":"No access rights, forbidden!"}
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: |
                    {"status":500,"message":"Internal server error"}
  /api/v1/messages:
    summary: Messages API Endpoint
    get:
      summary: Getting message(s)
      description: ''
      operationId: ''
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
        - in: query
          name: start
          schema:
            type: integer
          required: true
        - in: query
          name: count
          schema:
            type: integer
          required: true
        - in: query
          name: ticket_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              examples:
                Valid Message GET Request:
                  value: >
                   {
                      "status": 200,
                      "message": "Request successful",
                      "ticket_id": "54311e48-9229-4ba2-987d-3ee2802ccfda",
                      "last_response_time": "2023-04-17 21:20:20.604604",
                      "messages": [
                      {
                          "message_id": "89241c72-b101-44e8-980a-5cba485c529e",
                          "text": "Message 3",
                          "sender_id": "0e103f32-56db-4ede-8dac-b356549111f3",
                          "timestamp": "2023-04-17 15:50:06"
                      },
                      {
                          "message_id": "7300739e-39ac-4e70-9554-ee7f8164f994",
                          "text": "Message 3",
                          "sender_id": "0e103f32-56db-4ede-8dac-b356549111f3",
                          "timestamp": "2023-04-17 15:50:06"
                      },
                      {
                          "message_id": "cc4cfafb-3587-4d0e-814d-e8f8573fdd34",
                          "text": "Message 3",
                          "sender_id": "0e103f32-56db-4ede-8dac-b356549111f3",
                          "timestamp": "2023-04-17 15:50:07"
                      },
                      {
                          "message_id": "19196cb6-c042-45ca-828a-56f47b40a0cf",
                          "text": "Message 3",
                          "sender_id": "0e103f32-56db-4ede-8dac-b356549111f3",
                          "timestamp": "2023-04-17 15:50:07"
                      },
                      {
                          "message_id": "801e761b-6e14-4a1f-a308-4ade97b4a77a",
                          "text": "Message 3",
                          "sender_id": "0e103f32-56db-4ede-8dac-b356549111f3",
                          "timestamp": "2023-04-17 15:50:08"
                      },
                      {
                          "message_id": "813170c5-9d0c-4101-83ee-1be2c145fb92",
                          "text": "Message 3",
                          "sender_id": "0e103f32-56db-4ede-8dac-b356549111f3",
                          "timestamp": "2023-04-17 15:50:08"
                      },
                      {
                          "message_id": "80830654-a2e4-4f26-bf36-831d8740404f",
                          "text": "Message 3",
                          "sender_id": "0e103f32-56db-4ede-8dac-b356549111f3",
                          "timestamp": "2023-04-17 15:50:09"
                        }
                      ]
                    }
        '400':
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: |
                    {"status":400,"message":"Malformed request!"}
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: |
                    {"status":403,"message":"No access rights, forbidden!"}
        404:
          description: Associated ticket not found
          content:
            application/json:
              examples:
                Wrong Ticket UUID supplied:
                  value: |
                    {"status":404,"message":"Associated ticket doesn't exist!"}
        
        
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: |
                    {"status":500,"message":"Internal server error"}
      
    post:
      summary: Creating a new message
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: >                
                {
                  "text":"TestTicket5 Messagde20",
                  "ticket_id":"e78c6f74-169b-4e72-a576-9be89a01cda7"
                }
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              examples:
                Valid Message POST Request:
                  value: >
                   {
                      "status": 201,
                      "message": "Message created successfully",
                      "messageID": "7aa4ad42-ee9d-4d19-a4f5-968307093912",
                      "text": "TestTicket5 Messagde20",
                      "senderID": "1",
                      "ticketID": "e78c6f74-169b-4e72-a576-9be89a01cda7",
                      "posted_at": "2023-04-16 18:38:26.032573",
                      "hidden": false,
                      "flagged": false
                    }
        '400':
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: |
                    {"status":400,"message":"Malformed request!"}
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: |
                    {"status":403,"message":"No access rights, forbidden!"}
        '404':
          description: Associated ticket not found
          content:
            application/json:
              examples:
                Wrong Ticket UUID supplied:
                  value: |
                    {"status":404,"message":"Associated ticket not found!"}
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: |
                    {"status":500,"message":"Internal server error"}

  /api/v1/messages/<UUID_message>:
    summary: Messages API Endpoint
    delete:
      summary: Deleting a specific message
      description: ''
      operationId: ''
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              examples:
                Valid Message DELETE Request:
                  value: >
                    {
                      "message": "Message deleted successfully"
                    }
        '404':
          description: Message not found
          content:
            application/json:
              examples:
                Invalid Message DELETE Request:
                  value: >
                    {
                        "message": "Message doesn't exist"
                    }
        '400':
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: |
                    {"status":400,"message":"Malformed request!"}
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: |
                    {"status":403,"message":"No access rights, forbidden!"}
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: |
                    {"status":500,"message":"Internal server error"}
  /api/v1/articles:
    summary: Article API ENDPOINT - Admins ONLY
    post:
      summary: Article Creation
      description: ''
      operationId: ''
      parameters: 
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:   # Sample object
                title: "NewArticleTestYAML"
                content: "NewArticleTestYAML Content"
                tags: "ArticleTag1,ArticleTag2"
            
      responses:
        201:
          description: Valid article created
          content:
            application/json:
              examples:
                Valid Article Creation:
                  value: 
                    {
                      "status": 201,
                      "article_id": "19942633-3f6c-432c-9cd5-d5efe66e5613",
                      "message": "Article created successfully",
                      "title": "NewArticleTestYAML ",
                      "content": "NewArticleTestYAML Content",
                      "created_at": "2023-04-16 22:08:31.194673",
                      "creator": "1",
                      "tags": [
                          "ArticleTag1",
                          "ArticleTag2"
                      ],
                      "updated_at": "2023-04-16 22:08:31.194690"
                    }
        400:
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: 
                    {
                      "status":400,
                      "message":"Malformed request!"
                      
                    }
        403:
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: 
                    {
                      "status":403,
                      "message":"No access rights, forbidden!"
                      
                    }
        500:
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: 
                    {
                      "status":500,
                      "message":"Internal server error"
                      
                    }
    get:
      summary: Getting all articles
      description: ''
      operationId: ''
      parameters: 
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      
            
      responses:
        200:
          description: Request successful
          content:
            application/json:
              examples:
                Valid Article GET Request:
                  value: 
                    {
                        "status": 200,
                        "message": "Request successful",
                        "articles": [
                            {
                                "article_id": "d17c1c34-c692-4f86-87bd-fab46b2cd5b0",
                                "title": "NewArticleTest",
                                "content": "NewArticleTest Content",
                                "creator": "1",
                                "created_at": "2023-04-16 21:55:31.509069",
                                "updated_at": "2023-04-16 21:55:31.509084",
                                "tags": []
                            },
                            {
                                "article_id": "8fb4a58b-5dc2-48c2-84bb-2df5e83aa1c8",
                                "title": "NewArticleTest2",
                                "content": "NewArticleTest2 Content",
                                "creator": "1",
                                "created_at": "2023-04-16 21:56:54.429850",
                                "updated_at": "2023-04-16 21:56:54.429866",
                                "tags": []
                            },
                            {
                                "article_id": "c523b27f-7125-4e66-9e40-a5e2e888c5c0",
                                "title": "NewArticleTest2",
                                "content": "NewArticleTest2 Content",
                                "creator": "1",
                                "created_at": "2023-04-16 21:58:38.715062",
                                "updated_at": "2023-04-16 21:58:38.715080",
                                "tags": []
                            },
                            {
                                "article_id": "94bca31c-722c-4dee-8811-57d8fc089d40",
                                "title": "NewArticleTest2",
                                "content": "NewArticleTest2 Content",
                                "creator": "1",
                                "created_at": "2023-04-16 21:59:59.727358",
                                "updated_at": "2023-04-16 21:59:59.727375",
                                "tags": [
                                    "ArticleTag1",
                                    "ArticleTag2"
                                ]
                            },
                            {
                                "article_id": "19942633-3f6c-432c-9cd5-d5efe66e5613",
                                "title": "NewArticleTestYAML ",
                                "content": "NewArticleTestYAML Content",
                                "creator": "1",
                                "created_at": "2023-04-16 22:08:31.194673",
                                "updated_at": "2023-04-16 22:08:31.194690",
                                "tags": [
                                    "ArticleTag1",
                                    "ArticleTag2"
                                ]
                            }
                        ]
                      }
        400:
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: >
                    {
                      "status":400,
                      "message":"Malformed request!"
                      
                    }
        403:
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: 
                    {
                      "status":403,
                      "message":"No access rights, forbidden!"
                      
                    }
        500:
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: 
                    {
                      "status":500,
                      "message":"Internal server error"
                      
                    }
    
    
    
  /api/v1/articles/<UUID_article>:
    summary: SPECIFIC ARTICLE API ENDPOINT - ADMINS ONLY!
    get:
      summary: Getting a specific article
      description: ''
      operationId: ''
      parameters: 
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      
            
      responses:
        200:
          description: Request successful
          content:
            application/json:
              examples:
                Valid Article GET Request:
                  value: 
                    {
                      "status": 200,
                      "message": "Request successful",
                      "articleID":"<UUID_article>",
                      "title": "Article Title 1",
                      "content": "Article Content 1",
                      "creator": "Article Creator 1",
                      "created_at":"Article Creation Timestamp 1",
                      "updated_at":"Article Updation Timestamp 1"
                    }
        400:
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: 
                    {
                      "status":400,
                      "message":"Malformed request!"
                    }
        403:
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: >
                    {
                      "status":403,
                      "message":"No access rights, forbidden!"
                    }
        404:
          description: Associated article not found
          content:
            application/json:
              examples:
                Wrong Article UUID supplied:
                  value: |
                    {"status":404,"message":"Article doesn't exist!"}
        500:
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: 
                    {
                      "status":500,
                      "message":"Internal server error"
                      
                    }
    put:
      summary: Article Modification
      description: ''
      operationId: ''
      parameters: 
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      
            
      responses:
        200:
          description: Article updated successfully
          content:
            application/json:
              examples:
                Valid Article Updation:
                  value: 
                    {
                      "message": "Article modified successfully",
                      "article": [
                          {
                              "article_id": "ce4c3ffb-8e1f-4747-8e0c-7d599c386eb1",
                              "title": "Article Modification for YAML HaHa",
                              "content": "What the hell kinda name is Soap? How'd a muppet like you pass selection, eh?",
                              "creator": "98f02af8-eb30-4846-af0a-a6c45e7eaf58",
                              "created_at": "2023-04-17 19:07:16",
                              "updated_at": "2023-04-18 00:37:42.867674",
                              "tags": [
                                  "NoTag :)"
                              ]
                          }
                      ]
                    }
        400:
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: 
                    {
                      "status":400,
                      "message":"Malformed request!"
                    }
        403:
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: 
                    {
                      "status":403,
                      "message":"No access rights, forbidden!"
                    }
        404:
          description: Associated article not found
          content:
            application/json:
              examples:
                Wrong Article UUID supplied:
                  value: |
                    {"status":404,"message":"Article doesn't exist!"}
        500:
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: 
                    {
                      "status":500,
                      "message":"Internal server error"
                    }
    delete:
      summary: Article Deletion
      description: ''
      operationId: ''
      parameters: 
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      
            
      responses:
        200:
          description: Article deleted successfully
          content:
            application/json:
              examples:
                Valid Article Deletion:
                  value: 
                    {
                        "message": "Article deleted successfully"
                    }
        400:
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: 
                    {
                      "status":400,
                      "message":"Malformed request!"
                    }
        403:
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: 
                    {
                      "status":403,
                      "message":"No access rights, forbidden!"
                    }
        404:
          description: Associated article not found
          content:
            application/json:
              examples:
                Wrong Article UUID supplied:
                  value: |
                    {"status":404,"message":"Article doesn't exist!"}
        500:
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: 
                    {
                      "status":500,
                      "message":"Internal server error"
                    }

  /api/v1/comments:
    summary: COMMENT API ENDPOINT - Admins ONLY
    
    post:
      summary: Comment Creation
      description: ''
      operationId: ''
      parameters: 
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:   # Sample object
                articleUUID: "44013aaf-46e4-4e78-8c4c-6be0d0a828cf"
                content: "Comment POST API TEST"
                hidden: false
            
      responses:
        201:
          description: Valid comment created for article
          content:
            application/json:
              examples:
                Valid Comment Creation:
                  value: 
                    {
                      "status": 201,
                      "message": "Request successful",
                      "articleID": "44013aaf-46e4-4e78-8c4c-6be0d0a828cf",
                      "commentID": "91024bdd-7fe7-4a8c-af22-bdd57af545ae",
                      "content": "Comment POST API TEST",
                      "posted_at": "2023-04-17 19:15:36"
                    }
        400:
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: 
                    {
                      "status":400,
                      "message":"Malformed request!"
                      
                    }                
        403:
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: 
                    {
                      "status":403,
                      "message":"No access rights, forbidden!"
                      
                    }
        404:
          description: Associated article not found
          content:
            application/json:
              examples:
                Wrong Article UUID supplied:
                  value: |
                    {"status":404,"message":"Article doesn't exist!"}

        500:
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: 
                    {
                      "status":500,
                      "message":"Internal server error"
                      
                    }
    get:
      summary: Getting all comments of a particular article
      description: ''
      operationId: ''
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
        - in: query
          name: articleUUID
          schema:
            type: string
          required: true
      
            
      responses:
        200:
          description: Request successful
          content:
            application/json:
              examples:
                Valid Comment GET Request:
                  value: 
                    {
                      "status": 200,
                      "message": "Request successful",
                      "articleID": "5b19e043-b856-4df2-99aa-eb8dbc38ac88",
                      "comments": [
                          {
                              "id": "8a315e2a-5350-46b7-b202-05fee0e319b6",
                              "content": "test123",
                              "posted_at": "2023-04-17 19:10:34"
                          },
                          {
                              "id": "6556592e-a42b-4669-b8b7-3bdaeeb90d23",
                              "content": "tedst123",
                              "posted_at": "2023-04-17 19:14:53"
                          },
                          {
                              "id": "91024bdd-7fe7-4a8c-af22-bdd57af545ae",
                              "content": "tedst123d",
                              "posted_at": "2023-04-17 19:15:36"
                          },
                          {
                              "id": "65e72de5-47aa-4dce-ac32-94752f15bb86",
                              "content": "tedstsa123d",
                              "posted_at": "2023-04-17 19:16:40"
                          }
                      ]
                    }
        400:
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: 
                    {
                      "status":400,
                      "message":"Malformed request!"
                      
                    }
        403:
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: 
                    {
                      "status":403,
                      "message":"No access rights, forbidden!"
                      
                    }
        404:
          description: Associated article not found
          content:
            application/json:
              examples:
                Wrong Article UUID supplied:
                  value: |
                    {"status":404,"message":"Article doesn't exist!"}
        500:
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: 
                    {
                      "status":500,
                      "message":"Internal server error"
                      
                    }
  /api/v1/comments/<commentUUID>:
    summary: COMMENT API ENDPOINT - Admins ONLY    
    
    delete:
      summary: Delete a particular comment
      description: ''
      operationId: ''
      parameters: 
        - in: header
          name: Authorization
          schema:
            type: string
          required: true        
      
            
      responses:
        200:
          description: Deletion successful
          content:
            application/json:
              examples:
                Valid Comment DELETE Request:
                  value: 
                    {
                      "status": 200,
                      "message": "Deletion successful!"
                    }
        400:
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: >
                    {
                      "status":400,
                      "message":"Malformed request!"
                      
                    }
        403:
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: 
                    {
                      "status":403,
                      "message":"No access rights, forbidden!"
                      
                    }
        404:
          description: Comment not found
          content:
            application/json:
              examples:
                Wrong Article UUID supplied:
                  value: |
                    {"status":404,"message":"Comment doesn't exist!"}
        
        500:
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: 
                    {
                      "status":500,
                      "message":"Internal server error"
                      
                    }

  /api/v1/tags:
    summary: TAGS API ENDPOINT - Admins ONLY
    
    post:
      summary: Tag Creation
      description: ''
      operationId: ''
      parameters: 
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:   # Sample object
                name: "New Test Tag"
                description: "This is test tag for YAML"
            
      responses:
        201:
          description: Valid tag created
          content:
            application/json:
              examples:
                Valid Tag Creation:
                  value: 
                    {
                      "status": 201,
                      "message": "Request successful",
                      "tagID": "41a29f64-3865-435d-b689-90ccd5bc4c09",
                      "tagName": "New Test Tag",
                      "tagDescription": "This is test tag for YAML"
                    }
        400:
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: 
                    {
                      "status":400,
                      "message":"Malformed request!"                      
                    }                
        403:
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: 
                    {
                      "status":403,
                      "message":"No access rights, forbidden!"
                      
                    }

        500:
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: 
                    {
                      "status":500,
                      "message":"Internal server error"                      
                    }
    get:
      summary: Getting all tags or a particular tag
      description: ''
      operationId: ''
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
        - in: query
          name: tagIDList
          schema:
            type: string
          required: false
        - in: query
          name: name
          schema:
            type: string
          required: false
      
            
      responses:
        200:
          description: Request successful
          content:
            application/json:
              examples:
                Valid Comment GET Request:
                  value: 
                    {
                      "status": 200,
                      "message": "Request successful",
                      "tags": [
                          {
                              "tagID": "89e9c5c3-132c-4c70-97e1-c61624ca8cb5",
                              "name": "oppe",
                              "description": null
                          },
                          {
                              "tagID": "a60326b6-4e95-432b-8f9c-55bffd109064",
                              "name": "quiz1",
                              "description": null
                          }
                      ]
                    }
        400:
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: 
                    {
                      "status":400,
                      "message":"Malformed request!"                      
                    }
        403:
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: 
                    {
                      "status":403,
                      "message":"No access rights, forbidden!"
                      
                    }
        404:
          description: Associated tag(s) not found
          content:
            application/json:
              examples:
                Wrong tag name/UUID supplied:
                  value: |
                    {
                      "status": 404,
                      "message": "No matching tags found!"
                    }
        500:
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: 
                    {
                      "status":500,
                      "message":"Internal server error"
                      
                    }
  /api/v1/tags/<tagUUID>:
    summary: TAG API ENDPOINT - Admins ONLY    
    
    delete:
      summary: Delete a particular tag
      description: ''
      operationId: ''
      parameters: 
        - in: header
          name: Authorization
          schema:
            type: string
          required: true        
      
            
      responses:
        200:
          description: Deletion successful
          content:
            application/json:
              examples:
                Valid Tag DELETE Request:
                  value: 
                    {
                      "status": 200,
                      "message": "Deletion successful!"
                    }
        400:
          description: Malformed request
          content:
            application/json:
              examples:
                Malformed Request:
                  value: >
                    {
                      "status":400,
                      "message":"Malformed request!"
                      
                    }
        403:
          description: Forbidden
          content:
            application/json:
              examples:
                Forbidden Operation:
                  value: 
                    {
                      "status":403,
                      "message":"No access rights, forbidden!"
                      
                    }
        404:
          description: Tag not found
          content:
            application/json:
              examples:
                Wrong Tag UUID supplied:
                  value: |
                    {"status":404,"message":"Tag doesn't exist!"}
        
        500:
          description: Internal server error
          content:
            application/json:
              examples:
                Internal Server Error:
                  value: 
                    {
                      "status":500,
                      "message":"Internal server error"
                      
                    }
